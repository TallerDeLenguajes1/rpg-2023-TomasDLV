using System;
using System.Collections.Generic;
using System.IO;
using Newtonsoft.Json;

public enum Atributos
{
    Fuerza,
    Velocidad,
    Efectividad
}

public class Gallo
{
    public string Nombre { get; set; }
    public int Resistencia { get; set; }
    public int Victorias { get; set; }
    public int Derrotas { get; set; }
    public Dictionary<Atributos, int> Atributos { get; set; }

    public Gallo(string nombre)
    {
        Nombre = nombre;
        Resistencia = 100;
        Victorias = 0;
        Derrotas = 0;
        Atributos = new Dictionary<Atributos, int>();
    }

    public override string ToString()
    {
        return $"Nombre: {Nombre} | Resistencia: {Resistencia} | Victorias: {Victorias} | Derrotas: {Derrotas}";
    }
}

public class Torneo
{
    private List<Gallo> gallos;

    public List<Gallo> Gallos
    {
        get { return gallos; }
        set { gallos = value; }
    }

    public Torneo()
    {
        gallos = new List<Gallo>();
    }

    public void CargarGallosDesdeArchivo(string archivo)
    {
        if (File.Exists(archivo))
        {
            string contenido = File.ReadAllText(archivo);
            gallos = JsonConvert.DeserializeObject<List<Gallo>>(contenido);
        }
        else
        {
            Console.WriteLine("El archivo no existe. No se pudieron cargar los gallos.");
            Console.WriteLine();
        }
    }

    public void GuardarGallosEnArchivo(string archivo)
    {
        string contenido = JsonConvert.SerializeObject(gallos);
        File.WriteAllText(archivo, contenido);
    }

    public void MostrarResultadosTorneoAnterior()
    {
        Console.WriteLine("Resultados del torneo anterior:");
        foreach (Gallo gallo in gallos)
        {
            Console.WriteLine(gallo);
        }
        Console.WriteLine();
    }

    public void MostrarInformacionGallo(Gallo gallo)
    {
        Console.WriteLine("Información del gallo:");
        Console.WriteLine(gallo);
        Console.WriteLine();
    }

    public Gallo CrearGalloAutomatico()
    {
        string nombre = GenerarNombreAleatorio();
        Gallo gallo = new Gallo(nombre);

        Random rand = new Random();
        foreach (Atributos atributo in Enum.GetValues(typeof(Atributos)))
        {
            int valor = rand.Next(1, 11);
            gallo.Atributos.Add(atributo, valor);
        }

        gallos.Add(gallo);
        return gallo;
    }

    private string GenerarNombreAleatorio()
    {
        string[] nombres = { "Gallo1", "Gallo2", "Gallo3", "Gallo4", "Gallo5" };
        Random rand = new Random();
        return nombres[rand.Next(nombres.Length)];
    }

    public Gallo CrearGalloPersonalizado()
    {
        Console.WriteLine("Creación de gallo personalizado");

        Console.Write("Ingrese el nombre del gallo: ");
        string nombre = Console.ReadLine();

        Gallo gallo = new Gallo(nombre);

        foreach (Atributos atributo in Enum.GetValues(typeof(Atributos)))
        {
            Console.Write($"Ingrese el valor de {atributo}: ");
            int valor;
            while (!int.TryParse(Console.ReadLine(), out valor) || valor < 1 || valor > 10)
            {
                Console.WriteLine("Valor inválido. Por favor, ingrese un número del 1 al 10.");
                Console.Write($"Ingrese el valor de {atributo}: ");
            }
            gallo.Atributos.Add(atributo, valor);
        }

        gallos.Add(gallo);
        return gallo;
    }

    public void BorrarGallo()
    {
        Console.WriteLine("Borrar un gallo");

        if (gallos.Count == 0)
        {
            Console.WriteLine("No hay gallos para borrar.");
            Console.WriteLine();
            return;
        }

        Console.Write("Ingrese el nombre del gallo que desea borrar: ");
        string nombre = Console.ReadLine();

        Gallo gallo = gallos.Find(g => g.Nombre.Equals(nombre));
        if (gallo != null)
        {
            gallos.Remove(gallo);
            Console.WriteLine("Gallo borrado con éxito.");
        }
        else
        {
            Console.WriteLine("No se encontró un gallo con el nombre especificado.");
        }
        Console.WriteLine();
    }

    public void RealizarTorneo()
    {
        Console.WriteLine("¡Comienza el torneo!");

        int rondas = (int)Math.Ceiling(Math.Log(gallos.Count, 2));

        for (int ronda = 1; ronda <= rondas; ronda++)
        {
            Console.WriteLine($"Ronda {ronda}:");

            List<Gallo> ganadoresRonda = new List<Gallo>();

            for (int i = 0; i < gallos.Count; i += 2)
            {
                Gallo gallo1 = gallos[i];
                Gallo gallo2 = gallos[i + 1];

                Console.WriteLine($"Combate: {gallo1.Nombre} vs {gallo2.Nombre}");

                Gallo ganador = RealizarCombate(gallo1, gallo2);
                if (ganador != null)
                {
                    ganadoresRonda.Add(ganador);
                    Console.WriteLine($"El ganador del combate es: {ganador.Nombre}");
                    Console.WriteLine();
                }
            }

            gallos = ganadoresRonda;
        }

        Console.WriteLine("¡El torneo ha finalizado!");

        Gallo campeon = gallos[0];
        Console.WriteLine($"El ganador del torneo es: {campeon.Nombre}");

        campeon.Victorias++;
        campeon.Resistencia = 100;

        Console.WriteLine();
    }

    private Gallo RealizarCombate(Gallo gallo1, Gallo gallo2)
    {
        Random rand = new Random();
        Gallo atacante;
        Gallo defensor;

        if (rand.Next(2) == 0)
        {
            atacante = gallo1;
            defensor = gallo2;
        }
        else
        {
            atacante = gallo2;
            defensor = gallo1;
        }

        while (gallo1.Resistencia > 0 && gallo2.Resistencia > 0)
        {
            int ataque = CalcularAtaque(atacante);
            defensor.Resistencia -= ataque;

            Console.WriteLine($"{atacante.Nombre} ataca a {defensor.Nombre} con {ataque} puntos de daño.");

            if (defensor.Resistencia <= 0)
            {
                atacante.Victorias++;
                defensor.Derrotas++;
                return atacante;
            }

            // Cambiar de roles
            Gallo temp = atacante;
            atacante = defensor;
            defensor = temp;
        }

        return null;
    }

    private int CalcularAtaque(Gallo gallo)
    {
        int fuerza = gallo.Atributos[Atributos.Fuerza];
        int velocidad = gallo.Atributos[Atributos.Velocidad];
        int efectividad = gallo.Atributos[Atributos.Efectividad];

        return fuerza + velocidad + efectividad;
    }
}

class Program
{
    static void Main(string[] args)
    {
        const string archivoGallos = "gallos.json";

        Torneo torneo = new Torneo();

        Console.WriteLine("Bienvenido al juego de peleas de gallos");
        Console.WriteLine("---------------------------------------");

        bool salir = false;

        while (!salir)
        {
            Console.WriteLine("Menú principal:");
            Console.WriteLine("1. Ver resultados del torneo anterior");
            Console.WriteLine("2. Crear gallo");
            Console.WriteLine("3. Comenzar torneo");
            Console.WriteLine("4. Borrar gallo");
            Console.WriteLine("5. Salir");
            Console.WriteLine();

            Console.Write("Ingrese una opción: ");
            int opcion;
            while (!int.TryParse(Console.ReadLine(), out opcion) || opcion < 1 || opcion > 5)
            {
                Console.WriteLine("Opción inválida. Por favor, ingrese un número del 1 al 5.");
                Console.Write("Ingrese una opción: ");
            }

            Console.WriteLine();

            switch (opcion)
            {
                case 1:
                    torneo.CargarGallosDesdeArchivo(archivoGallos);
                    torneo.MostrarResultadosTorneoAnterior();
                    break;
                case 2:
                    Console.WriteLine("Crear gallo:");
                    Console.WriteLine("1. Generación automática");
                    Console.WriteLine("2. Personalizado");
                    Console.WriteLine();

                    Console.Write("Ingrese una opción: ");
                    int opcionCrear;
                    while (!int.TryParse(Console.ReadLine(), out opcionCrear) || opcionCrear < 1 || opcionCrear > 2)
                    {
                        Console.WriteLine("Opción inválida. Por favor, ingrese 1 o 2.");
                        Console.Write("Ingrese una opción: ");
                    }

                    Console.WriteLine();

                    if (opcionCrear == 1)
                    {
                        Gallo gallo = torneo.CrearGalloAutomatico();
                        torneo.MostrarInformacionGallo(gallo);
                    }
                    else
                    {
                        Gallo gallo = torneo.CrearGalloPersonalizado();
                        torneo.MostrarInformacionGallo(gallo);
                    }
                    break;
                case 3:
                    torneo.RealizarTorneo();
                    torneo.GuardarGallosEnArchivo(archivoGallos);
                    break;
                case 4:
                    torneo.CargarGallosDesdeArchivo(archivoGallos);
                    torneo.BorrarGallo();
                    torneo.GuardarGallosEnArchivo(archivoGallos);
                    break;
                case 5:
                    salir = true;
                    break;
            }
        }

        Console.WriteLine("Gracias por jugar. ¡Hasta luego!");
    }
}
